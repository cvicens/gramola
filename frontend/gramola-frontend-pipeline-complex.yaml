apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: gramola-frontend-pipeline-complex
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-   
        def BUILD_NAME = COMPONENT_NAME
            
        pipeline {
          agent {
            label 'nodejs'
          }
          stages {
            stage('Checkout') {
              steps {
                git url: "${GIT_URL}", branch: "${GIT_REF}"
              }
            }
            
            stage('Build') {
                steps {
                    dir("${CONTEXT_DIR}") {
                        sh "npm install"
                    }
                }
            }
            
            stage('Test') {
                steps {
                    dir("${CONTEXT_DIR}") {
                        print "npm run test"
                    }
                }
            }
            
            stage('Sonar') {
                steps {
                    script {
                        dir("${CONTEXT_DIR}") {
                          print "npx sonar-scanner -Dsonar.host.url=${SONAR} -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.login=${SONAR_TOKEN}"
                        }
                    }
                }
            }
                                
            stage('Create Image Builder') {
              when {
                expression {
                  openshift.withCluster() {
                    return !openshift.selector("bc", "${BUILD_NAME}").exists();
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.newBuild("--name=${BUILD_NAME}", "--image-stream=${BUILD_IMAGE_STREAM}", "--code=${GIT_URL}#${GIT_REF}", "--context-dir=${CONTEXT_DIR}")
                  }
                }
              }
            }

            stage('Build Image') {
              steps {
                script {
                  dir("${CONTEXT_DIR}") {
                    openshift.withCluster() {
                        openshift.selector("bc", "${BUILD_NAME}").startBuild("--wait")
                    }      
                  }
                }
              }
            }

            stage('Create DEV') {
              when {
                expression {
                  openshift.withCluster() {
                      openshift.withProject("${DEV_PROJECT_NAME}") {
                        return !openshift.selector('dc', "${COMPONENT_NAME}").exists()
                      }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("${DEV_PROJECT_NAME}") {
                        openshift.newApp("${DEV_PROJECT_NAME}/${BUILD_NAME}:latest", "--name=${COMPONENT_NAME}").narrow('svc').expose()
                        //def liveness = openshift.raw( "set probe dc/${COMPONENT_NAME} --liveness --get-url=http://:8080/health/live --initial-delay-seconds=50" )
                        //echo "After set probe liveness: ${liveness.out}"
                        //def readiness = openshift.raw( "set probe dc/${COMPONENT_NAME} --readiness --get-url=http://:8080/api/events --initial-delay-seconds=60" )
                        //echo "After set probe readiness: ${readiness.out}"
                        def partOfLabel = openshift.raw( "label dc/${COMPONENT_NAME} app.kubernetes.io/part-of=${APP_NAME}-app app.kubernetes.io/part-of=gramola-app app.openshift.io/runtime=nodejs" )
                        echo "After label part-of partOfLabel: ${partOfLabel.out}"
                        def annotate = openshift.raw( "annotate dc/${COMPONENT_NAME} app.openshift.io/connects-to=gateway --overwrite" )
                        echo "After annotate: ${annotate.out}"
                    }
                  }
                }
              }
            }

            stage('Approve') {
                steps {
                    timeout(time:15, unit:'MINUTES') {
                        input message:'Approve Deploy to TEST?'
                    }
                }
            }

            stage('Promote to TEST') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.tag("${BUILD_NAME}:latest", "${BUILD_NAME}:test")
                  }
                }
              }
            }

            stage('Create TEST') {
              when {
                expression {
                  openshift.withCluster() {
                      openshift.withProject("${TEST_PROJECT_NAME}") {
                        return !openshift.selector('dc', "${COMPONENT_NAME}").exists()
                      }
                  }
                }
              }
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject("${TEST_PROJECT_NAME}") {
                        openshift.newApp("${DEV_PROJECT_NAME}/${BUILD_NAME}:test", "--name=${COMPONENT_NAME}").narrow('svc').expose()
                        //def liveness = openshift.raw( "set probe dc/${COMPONENT_NAME} --liveness --get-url=http://:8080/health/live --initial-delay-seconds=50" )
                        //echo "After set probe liveness: ${liveness.out}"
                        //def readiness = openshift.raw( "set probe dc/${COMPONENT_NAME} --readiness --get-url=http://:8080/api/events --initial-delay-seconds=60" )
                        //echo "After set probe readiness: ${readiness.out}"
                        def partOfLabel = openshift.raw( "label dc/${COMPONENT_NAME} app.kubernetes.io/part-of=${APP_NAME}-app app.kubernetes.io/part-of=gramola-app app.openshift.io/runtime=nodejs" )
                        echo "After label part-of partOfLabel: ${partOfLabel.out}"
                        def annotate = openshift.raw( "annotate dc/${COMPONENT_NAME} app.openshift.io/connects-to=gateway --overwrite" )
                        echo "After annotate: ${annotate.out}"
                    }
                  }
                }
              }
            }
          }
        }
      env:
        - name: MAVEN_OPTS
          value: >-
            -Dsun.zip.disableMemoryMapping=true -Xms20m
            -Djava.security.egd=file:/dev/./urandom
            -XX:+UnlockExperimentalVMOptions
            -Dsun.zip.disableMemoryMapping=true'
        - name: LAB_INFRA_PROJECT_NAME
          value: "lab-infra"
        - name: APP_NAME
          value: "gramola"
        - name: COMPONENT_NAME
          value: "frontend"
        - name: APP_VERSION
          value: "1.0.0"
        - name: DEV_PROJECT_NAME
          value: "gramola-dev"
        - name: TEST_PROJECT_NAME
          value: "gramola-test"
        - name: GIT_URL
          value: "https://github.com/cvicens/gramola.git"
        - name: GIT_REF
          value: "master"
        - name: CONTEXT_DIR
          value: "gateway"
        - name: BUILD_IMAGE_STREAM
          value: "nodejs:12"
        - name: NEXUS
          value: "http://nexus-lab-infra"
        - name: NEXUS_USERNAME
          value: "admin"
        - name: NEXUS_PASSWORD
          value: "admin123"
        - name: NEXUS_PATH
          value: "com/redhat/gramola/gateway"
        - name: SONAR_TOKEN
          value: "CHANGE_IT"
        - name: SONAR
          value: "http://sonarqube-lab-infra"
        - name: JOB_BASE_NAME
          value: "gramola-gateway-job"
          
    type: JenkinsPipeline